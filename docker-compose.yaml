services:
  php:
    build:
      context: ./dockerfiles/php
    container_name: echat-php
    working_dir: /var/www
    env_file:
      - docker.env
    volumes:
      - ./:/var/www
    depends_on:
      - mysql
      - redis
    networks:
      - app-network

  nginx:
    build:
      context: ./dockerfiles/nginx
    container_name: echat-nginx
    ports:
      - "8080:80"
    volumes:
      - ./:/var/www
      - ./dockerfiles/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - php
    networks:
      - app-network

  node:
    image: node:20-alpine
    container_name: echat-node
    working_dir: /var/www
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: sh -c "npm install && npm run build"
    volumes:
      - ./:/var/www
    networks:
      - app-network
    restart: unless-stopped

  echo:
    build:
      context: ./dockerfiles/echo
    container_name: echat-echo
    working_dir: /var/www
    env_file:
      - docker.env
    environment:
      - ECHO_PROTOCOL=http
      - ECHO_REDIS_HOST=redis
      - ECHO_REDIS_PORT=6379
    volumes:
      - ./:/var/www
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    container_name: echat-mysql
    command: --default-authentication-plugin=mysql_native_password
    env_file:
      - docker.env
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: echat-redis
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
  redis-data:

version: '3.8'

services:
  php:
    build:
      context: ./dockerfiles/php
    container_name: echat-php
    working_dir: /var/www
    env_file:
      - docker.env
    volumes:
      - ./:/var/www
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    build:
      context: ./dockerfiles/nginx
    container_name: echat-nginx
    ports:
      - "8080:80"
    volumes:
      - ./:/var/www
      - ./dockerfiles/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - php
    networks:
      - app-network
    restart: unless-stopped

  node:
    image: node:20-alpine
    container_name: echat-node
    working_dir: /var/www
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
    # Выберите одну из команд в зависимости от задачи:
    # Для одноразовой сборки:
    command: sh -c "npm ci && npm run build"
    # Для разработки с watch режимом:
    # command: sh -c "npm ci && npm run dev"
    volumes:
      - ./:/var/www
      - node_modules:/var/www/node_modules  # кеширование node_modules
    networks:
      - app-network
    profiles:
      - build  # опционально: запускать только при необходимости

  echo:
    build:
      context: ./dockerfiles/echo
    container_name: echat-echo
    working_dir: /var/www
    env_file:
      - docker.env
    environment:
      - ECHO_PROTOCOL=http
      - ECHO_HOST=0.0.0.0
      - ECHO_PORT=6001
      - ECHO_REDIS_HOST=redis
      - ECHO_REDIS_PORT=6379
    # Порт не экспонируется - Echo работает только внутри контейнерной сети
    volumes:
      - ./:/var/www
    depends_on:
      redis:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    container_name: echat-mysql
    command: --default-authentication-plugin=mysql_native_password --innodb-use-native-aio=0
    env_file:
      - docker.env
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    # Порт не экспонируется - MySQL работает только внутри контейнерной сети
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d  # скрипты инициализации
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: echat-redis
    command: redis-server --appendonly yes  # включение persistence
    # Порт не экспонируется - Redis работает только внутри контейнерной сети
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  node_modules:  # для кеширования зависимостей Node.js
    driver: local